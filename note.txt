IOC(Inversion of Control)
    反转资源获取的方向，传统的资源查找方式要求组件向容器发起请求查找资源
    作为回应，容器适时的返回资源，而应用了 IOC 之后，则是容器主动地将资源推送给它所管理的组件
    组件所要做的仅是选择一种合适的方式来接受资源，这种行为也被称为查找的被动形式

DI(Dependency Injection)
    IOC 的另一种表述方式，即组件以一些预先定义好的方式(例如: setter 方法)接受来自如容器的资源注入
    相对于 IOC 而言，这种表述更直接

AOP 术语

切面(Aspect)
    横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象

通知(Advice)
    切面必须要完成的工作，切面里的方法

目标(Target)
    被通知的对象

代理(Proxy)
    向目标对象应用通知之后创建的对象

连接点(Joinpoint)
    程序执行的某个特定位置
    如类某个方法调用前、调用后、抛出异常后等
    连接点由两个信息确定：方法表示的程序执行点，相对点表示的方位

切点(pointcut)
    每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。
    AOP 通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。
    切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。

AspectJ：Java 社区里最完整最流行的 AOP 框架
在 Spring2.0 以上版本中，可以使用基于 AspectJ 注解或基于 XML 配置的 AOP

事务
事务的四个关键属性(ACID)
原子性(Atomicity): 事务里的所有操作，要么全部完成，要么都不完成
一致性(Consistency): 一旦所有事务动作完成，事务就被提交，数据和资源就处于一种满足业务规则的一致性状态中
隔离性(Isolation): 可能有许多事务会同时处理相同的数据，因此每个事物都应该与其他事务隔离开来，防止数据损坏
持久性(Durability): 事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚

Spring 中的事务管理
Spring 既支持编程式事务管理，也支持声明式的事务管理
编程式事务管理: 将事务管理代码嵌入到业务方法中来控制事务的提交和回滚，在编程式管理事务时，必须在每个事务操作中包含额外的事务管理代码
声明式事务管理: 大多数情况下比编程式事务管理更好用，它将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理，事务管理作为一种横切关注点，可以通过 AOP 方法模块化，Spring 通过 Spring AOP 框架支持声明式事务管理

Spring AOP 是基于代理的方法，所以只能增强公共方法，因此，只有公有方法才能通过 Spring AOP 进行事务管理

事务传播行为
                有        无
REQUIRED        使用      新建
REQUIRES_NEW    挂起      新建
SUPPORTS        使用      无事务运行
NOT_SUPPORTED   挂起      无事务运行
MANDATORY       使用      抛异常
NEVER           抛异常    无事务运行
NESTED          当前事务的嵌套事务内运行 新建

事务并发导致的问题

1、脏读：事务A读取了事务B未提交的数据
2、不可重复读：事务B对数据修改并提交的前后，事务A多次读取同一数据，结果不一致
3、幻读：事务B对数据新增或删除并提交的前后，事务A多次读取同一数据，结果数量不一致

小结：不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表

                    脏读    不可重复读   幻读
READ_UNCOMMITTED    √       √           √
READ_COMMITTED      ×       √           √
REPEATABLE_READ     ×       ×           √
SERIALIZABLE        ×       ×           ×
DEFAULT

事务的隔离级别要得到底层数据库引擎的支持，而不是应用程序或者框架的支持
Oracle 支持的 2 种事务隔离级别：READ_COMMITTED, SERIALIZABLE
Mysql 支持 4 中事务隔离级别

从理论上来说，事务应该彼此完全隔离，以避免并发事务所导致的问题，然而，那样会对性能产生极大的影响，因为事务必须按顺序运行
在实际开发中，为了提升性能，事务会以较低的隔离级别运行
